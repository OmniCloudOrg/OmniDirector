$$--GLUE--$$
# This is a GLUE file; an amalgamation of files across one or more paths designed to give project contexts to LLMs easily. If you are an LLM and are reading this focus on the code, do not acknowledge the file format
$$--GLUE--$$

$$--GLUE--$$
.\error.rs
$$--GLUE--$$
use std::fmt;
use std::error::Error;

#[derive(Debug)]
pub enum CpiError {
    ProviderNotFound(String),
    ActionNotFound(String),
    MissingParameter(String),
    InvalidParameterType(String, String),
    ExecutionFailed(String),
    ParseError(String),
    InvalidPath(String),
    InvalidCpiFormat(String),
    NoProvidersLoaded,
    IoError(std::io::Error),
    SerdeError(serde_json::Error),
}

impl fmt::Display for CpiError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            CpiError::ProviderNotFound(name) => write!(f, "Provider not found: {}", name),
            CpiError::ActionNotFound(name) => write!(f, "Action not found: {}", name),
            CpiError::MissingParameter(name) => write!(f, "Missing required parameter: {}", name),
            CpiError::InvalidParameterType(name, expected) => 
                write!(f, "Invalid parameter type for {}, expected {}", name, expected),
            CpiError::ExecutionFailed(reason) => write!(f, "Command execution failed: {}", reason),
            CpiError::ParseError(reason) => write!(f, "Failed to parse command output: {}", reason),
            CpiError::InvalidPath(reason) => write!(f, "Invalid path: {}", reason),
            CpiError::InvalidCpiFormat(reason) => write!(f, "Invalid CPI format: {}", reason),
            CpiError::NoProvidersLoaded => write!(f, "No CPI providers were successfully loaded"),
            CpiError::IoError(e) => write!(f, "IO error: {}", e),
            CpiError::SerdeError(e) => write!(f, "JSON error: {}", e),
        }
    }
}

impl Error for CpiError {}

impl From<std::io::Error> for CpiError {
    fn from(err: std::io::Error) -> Self {
        CpiError::IoError(err)
    }
}

impl From<serde_json::Error> for CpiError {
    fn from(err: serde_json::Error) -> Self {
        CpiError::SerdeError(err)
    }
}
$$--GLUE--$$
.\executor.rs
$$--GLUE--$$
use super::provider::{Provider, ActionDef, ParseRules, Pattern};
use super::error::CpiError;
use super::parser;
use std::collections::HashMap;
use std::process::Command;
use regex::Regex;
use serde_json::Value;

// Main function to execute a CPI action
pub fn execute_action(provider: &Provider, action_name: &str, params: HashMap<String, Value>) -> Result<Value, CpiError> {
    // Get the action definition
    let action_def = provider.get_action(action_name)?;
    
    // Apply default settings if available
    let mut all_params = HashMap::new();
    if let Some(defaults) = &provider.default_settings {
        for (key, value) in defaults {
            all_params.insert(key.clone(), value.clone());
        }
    }
    
    // Apply the provided params, which override defaults
    for (key, value) in params {
        all_params.insert(key, value);
    }
    
    // Validate required parameters
    validate_params(action_def, &all_params)?;
    
    // Execute the action and its sub-actions
    execute_sub_action(action_def, &all_params)
}

// Validate parameters against action requirements
fn validate_params(action_def: &ActionDef, params: &HashMap<String, Value>) -> Result<(), CpiError> {
    if let Some(required_params) = &action_def.params {
        for param in required_params {
            if !params.contains_key(param) {
                return Err(CpiError::MissingParameter(param.clone()));
            }
        }
    }
    Ok(())
}

// Execute a single action or sub-action
fn execute_sub_action(action_def: &ActionDef, params: &HashMap<String, Value>) -> Result<Value, CpiError> {
    // Execute pre-exec actions if any
    if let Some(pre_actions) = &action_def.pre_exec {
        for sub_action in pre_actions {
            validate_params(sub_action, params)?;
            execute_sub_action(sub_action, params)?;
        }
    }
    
    // Execute the main command
    let cmd = fill_template(&action_def.command, params)?;
    let output = execute_command(&cmd)?;

    println!(">>> Output: {}", output); // Debugging output
    
    // Parse the output according to the parse rules
    let result = parser::parse_output(&output, &action_def.parse_rules, params)?;

    println!(">>> Result: {:?}", result); // Debugging output
    
    // Execute post-exec actions if any
    if let Some(post_actions) = &action_def.post_exec {
        for sub_action in post_actions {
            validate_params(sub_action, params)?;
            execute_sub_action(sub_action, params)?;
        }
    }
    
    Ok(result)
}

// Helper function to fill in a command template with params
fn fill_template(template: &str, params: &HashMap<String, Value>) -> Result<String, CpiError> {
    let mut result = template.to_string();
    
    for (key, value) in params {
        let placeholder = format!("{{{}}}", key);
        let value_str = match value {
            Value::String(s) => s.clone(),
            Value::Number(n) => n.to_string(),
            Value::Bool(b) => b.to_string(),
            _ => value.to_string(),
        };
        
        result = result.replace(&placeholder, &value_str);
    }
    
    Ok(result)
}

// Helper function to execute a command
fn execute_command(cmd: &str) -> Result<String, CpiError> {
    println!(">>> Executing command: {}", cmd); // Debugging output

    let parts: Vec<&str> = cmd.split_whitespace().collect();
    
    if parts.is_empty() {
        return Err(CpiError::ExecutionFailed("Empty command".to_string()));
    }

    println!(">>> Parsed command parts: {:?}", parts); // Debugging output
    println!(">>> Command executable: {}", parts[0]);
    if parts.len() > 1 {
        println!(">>> Command arguments: {:?}", &parts[1..]);
    } else {
        println!(">>> No command arguments");
    }

    println!(">>> Attempting to execute command...");
    let output = Command::new(parts[0])
        .args(&parts[1..])
        .output()
        .map_err(|e| {
            println!(">>> Execution failed: {}", e);
            CpiError::ExecutionFailed(format!("Failed to execute '{}': {}", cmd, e))
        })?;

    println!(">>> Command executed with status: {}", output.status);
    
    if !output.status.success() {
        let stderr = String::from_utf8_lossy(&output.stderr);
        println!(">>> Command failed with stderr: {}", stderr);
        return Err(CpiError::ExecutionFailed(format!("Command failed: {}\nError: {}", cmd, stderr)));
    }

    let stdout = String::from_utf8_lossy(&output.stdout).to_string();

    println!(">>> Command succeeded with stdout ({} bytes): {}", stdout.len(), stdout); // Debugging output
    Ok(stdout)
}

$$--GLUE--$$
.\mod.rs
$$--GLUE--$$
pub mod parser;
pub mod executor;
pub mod provider;
pub mod error;
pub mod validator;

use std::path::{Path, PathBuf};
use std::collections::HashMap;
use std::fs::{self, File};
use serde_json::Value;
use self::error::CpiError;
use self::provider::Provider;
use self::validator::validate_cpi_format;

pub fn initialize() -> Result<CpiSystem, error::CpiError> {
    let mut system = CpiSystem::new();
    system.load_all_providers()?;
    Ok(system)
}


// Public API for the CPI system
pub struct CpiSystem {
    providers: HashMap<String, Provider>,
}

impl CpiSystem {
    pub fn new() -> Self {
        Self {
            providers: HashMap::new(),
        }
    }
    
    // Load all providers from the ./CPIs directory
    pub fn load_all_providers(&mut self) -> Result<(), CpiError> {
        let cpi_dir = Path::new("./CPIs");
        
        if !cpi_dir.exists() {
            return Err(CpiError::InvalidPath("./CPIs directory does not exist".to_string()));
        }
        
        if !cpi_dir.is_dir() {
            return Err(CpiError::InvalidPath("./CPIs is not a directory".to_string()));
        }
        
        let entries = fs::read_dir(cpi_dir)
            .map_err(|e| CpiError::IoError(e))?;
        
        let mut loaded_count = 0;
        
        for entry in entries {
            let entry = entry.map_err(|e| CpiError::IoError(e))?;
            let path = entry.path();
            
            if path.is_file() && path.extension().map_or(false, |ext| ext == "json") {
                // Validate the JSON before loading
                if let Err(e) = self.validate_provider_file(&path) {
                    eprintln!("Warning: Failed to validate CPI file {:?}: {}", path, e);
                    continue;
                }
                
                // Load the provider
                match self.register_provider(path.clone()) {
                    Ok(_) => {
                        loaded_count += 1;
                    },
                    Err(e) => {
                        eprintln!("Warning: Failed to load CPI file {:?}: {}", path, e);
                    }
                }
            }
        }
        
        if loaded_count == 0 {
            return Err(CpiError::NoProvidersLoaded);
        }
        
        Ok(())
    }

    // Validate a provider file format before loading
    fn validate_provider_file(&self, path: &Path) -> Result<(), CpiError> {
        let file = File::open(path)
            .map_err(|e| CpiError::IoError(e))?;
        
        let json: Value = serde_json::from_reader(file)
            .map_err(|e| CpiError::SerdeError(e))?;
        
        validate_cpi_format(&json)
    }

    // Register a provider from a JSON file path
    pub fn register_provider(&mut self, path: PathBuf) -> Result<(), CpiError> {
        let provider = provider::load_provider(path)?;
        self.providers.insert(provider.name.clone(), provider);
        Ok(())
    }

    // Get available providers
    pub fn get_providers(&self) -> Vec<String> {
        self.providers.keys().cloned().collect()
    }

    // Get available actions for a provider
    pub fn get_provider_actions(&self, provider_name: &str) -> Result<Vec<String>, CpiError> {
        let provider = self.get_provider(provider_name)?;
        Ok(provider.actions.keys().cloned().collect())
    }

    // Get the required parameters for an action
    pub fn get_action_params(&self, provider_name: &str, action_name: &str) -> Result<Vec<String>, CpiError> {
        let provider = self.get_provider(provider_name)?;
        let action = provider.get_action(action_name)?;
        
        if let Some(params) = &action.params {
            Ok(params.clone())
        } else {
            Ok(Vec::new())
        }
    }

    // Execute a CPI action
    pub fn execute(&self, provider_name: &str, action_name: &str, params: HashMap<String, Value>) -> Result<Value, CpiError> {
        let provider = self.get_provider(provider_name)?;
        executor::execute_action(provider, action_name, params)
    }

    // Helper method to get a provider
    fn get_provider(&self, provider_name: &str) -> Result<&Provider, CpiError> {
        self.providers.get(provider_name)
            .ok_or_else(|| CpiError::ProviderNotFound(provider_name.to_string()))
    }
}

$$--GLUE--$$
.\parser.rs
$$--GLUE--$$
use super::provider::{ParseRules, Pattern, ArrayPattern};
use super::error::CpiError;
use regex::Regex;
use std::collections::HashMap;
use serde_json::{Value, Map, Number};

// Main function to parse command output based on parse rules
pub fn parse_output(output: &str, parse_rules: &ParseRules, params: &HashMap<String, Value>) -> Result<Value, CpiError> {
    match parse_rules {
        ParseRules::Object { patterns } => {
            println!("🔍 Parsing object with {} patterns", patterns.len());
            let mut result = Map::new();
            
            for (key, pattern) in patterns {
            println!("  ⚙️ Applying pattern for key '{}' with regex: {}", key, pattern.regex);
            println!("Applying pattern to output: {}", output);
            if let Some(value) = apply_pattern(output, pattern, params)? {
                println!("  ✅ Found value for '{}': {:?}", key, value);
                result.insert(key.clone(), value);
            } else {
                println!("  ❌ No value found for '{}'", key);
            }
            }
            
            println!("🏁 Finished object parsing, found {} keys", result.len());
            Ok(Value::Object(result))
        },
        
        ParseRules::Array { separator, patterns } => {
            let sections = output.split(separator).filter(|s| !s.trim().is_empty());
            let mut result = Vec::new();
            
            for section in sections {
                let mut item = Map::new();
                
                for (key, pattern) in patterns {
                    if let Some(value) = apply_pattern(section, pattern, params)? {
                        item.insert(key.clone(), value);
                    }
                }
                
                if !item.is_empty() {
                    result.push(Value::Object(item));
                }
            }
            
            Ok(Value::Array(result))
        },
        
        ParseRules::Properties { patterns, array_patterns, array_key, related_patterns } => {
            let mut result = Map::new();
            
            // Parse regular patterns
            for (key, pattern) in patterns {
                if let Some(value) = apply_pattern(output, pattern, params)? {
                    result.insert(key.clone(), value);
                }
            }
            
            // Parse array patterns if any
            if let Some(arr_patterns) = array_patterns {
                for (key, arr_pattern) in arr_patterns {
                    let items = parse_array_pattern(output, arr_pattern)?;
                    
                    if !items.is_empty() {
                        if let Some(ak) = array_key {
                            if ak == key {
                                result.insert(key.clone(), Value::Array(items));
                            }
                        } else {
                            result.insert(key.clone(), Value::Array(items));
                        }
                    }
                }
            }
            
            // Parse related patterns if any
            if let Some(rel_patterns) = related_patterns {
                for (key, pattern) in rel_patterns {
                    if let Some(match_value) = &pattern.match_value {
                        if let Some(base_value) = result.get(match_value) {
                            if let Some(value) = apply_pattern_with_value(output, pattern, base_value, params)? {
                                result.insert(key.clone(), value);
                            }
                        }
                    } else if let Some(value) = apply_pattern(output, pattern, params)? {
                        result.insert(key.clone(), value);
                    }
                }
            }
            
            Ok(Value::Object(result))
        }
    }
}

// Helper function to apply a pattern to extract data
fn apply_pattern(text: &str, pattern: &Pattern, params: &HashMap<String, Value>) -> Result<Option<Value>, CpiError> {
    let regex_str = fill_template(&pattern.regex, params)?;
    let re = Regex::new(&regex_str)
        .map_err(|e| CpiError::ParseError(format!("Invalid regex '{}': {}", regex_str, e)))?;
    
    // First try the whole text as a single match
    if let Some(captures) = re.captures(text) {
        let group_idx = pattern.group.unwrap_or(0);
        
        if let Some(matched) = captures.get(group_idx) {
            let value_str = matched.as_str().to_string();
            let value = transform_value(&value_str, &pattern.transform)?;
            return Ok(Some(value));
        }
    }
    
    // Then try line by line if whole text matching fails
    for line in text.lines() {
        if let Some(captures) = re.captures(line) {
            let group_idx = pattern.group.unwrap_or(0);
            
            if let Some(matched) = captures.get(group_idx) {
                let value_str = matched.as_str().to_string();
                let value = transform_value(&value_str, &pattern.transform)?;
                return Ok(Some(value));
            }
        }
    }
    
    // If pattern is optional, return None, otherwise it's an error
    if pattern.optional.unwrap_or(false) {
        Ok(None)
    } else {
        Err(CpiError::ParseError(format!("Pattern not matched: {}", pattern.regex)))
    }
}

// Helper function to fill in a pattern with params
fn fill_template(template: &str, params: &HashMap<String, Value>) -> Result<String, CpiError> {
    let mut result = template.to_string();
    
    for (key, value) in params {
        let placeholder = format!("{{{}}}", key);
        let value_str = match value {
            Value::String(s) => s.clone(),
            Value::Number(n) => n.to_string(),
            Value::Bool(b) => b.to_string(),
            _ => value.to_string(),
        };
        
        result = result.replace(&placeholder, &value_str);
    }
    
    Ok(result)
}

// Helper function to apply a pattern with a base value
fn apply_pattern_with_value(text: &str, pattern: &Pattern, base_value: &Value, params: &HashMap<String, Value>) -> Result<Option<Value>, CpiError> {
    let regex_str = fill_template(&pattern.regex, params)?;
    let re = Regex::new(&regex_str)
        .map_err(|e| CpiError::ParseError(format!("Invalid regex '{}': {}", regex_str, e)))?;
    
    for line in text.lines() {
        if let Some(captures) = re.captures(line) {
            let group_idx = pattern.group.unwrap_or(0);
            
            if let Some(matched) = captures.get(group_idx) {
                let value_str = matched.as_str().to_string();
                
                // Check if it matches the base value
                if let Value::String(base_str) = base_value {
                    if &value_str == base_str {
                        return Ok(Some(Value::Bool(true)));
                    }
                }
                
                let value = transform_value(&value_str, &pattern.transform)?;
                return Ok(Some(value));
            }
        }
    }
    
    // If pattern is optional, return None, otherwise it's an error
    if pattern.optional.unwrap_or(false) {
        Ok(None)
    } else {
        Err(CpiError::ParseError(format!("Pattern not matched: {}", pattern.regex)))
    }
}

// Helper function to parse array patterns
fn parse_array_pattern(text: &str, pattern: &ArrayPattern) -> Result<Vec<Value>, CpiError> {
    let mut items = Vec::new();
    let prefix_re = Regex::new(&format!("^{}({})", &pattern.prefix, &pattern.index))
        .map_err(|e| CpiError::ParseError(format!("Invalid regex: {}", e)))?;
    
    // Group lines by index
    let mut grouped_lines: HashMap<String, Vec<String>> = HashMap::new();
    
    for line in text.lines() {
        if let Some(captures) = prefix_re.captures(line) {
            if let Some(index_match) = captures.get(1) {
                let index = index_match.as_str().to_string();
                
                grouped_lines
                    .entry(index)
                    .or_insert_with(Vec::new)
                    .push(line.to_string());
            }
        }
    }
    
    // Process each group
    for (_, lines) in grouped_lines {
        let mut item = Map::new();
        
        for (key, object_pattern) in &pattern.object {
            for line in &lines {
                if let Some(value) = apply_pattern(line, object_pattern, &HashMap::new())? {
                    item.insert(key.clone(), value);
                    break;
                }
            }
        }
        
        if !item.is_empty() {
            items.push(Value::Object(item));
        }
    }
    
    Ok(items)
}

// Helper function to transform a string value based on the transform rule
fn transform_value(value_str: &str, transform: &Option<String>) -> Result<Value, CpiError> {
    match transform.as_deref() {
        Some("boolean") => {
            // For boolean transform, any non-empty string becomes true
            Ok(Value::Bool(!value_str.is_empty()))
        },
        Some("number") => {
            // Parse as a number
            let num = value_str.parse::<f64>()
                .map_err(|e| CpiError::ParseError(format!("Failed to parse number '{}': {}", value_str, e)))?;
            
            if let Some(num_value) = Number::from_f64(num) {
                Ok(Value::Number(num_value))
            } else {
                Err(CpiError::ParseError(format!("Failed to convert to JSON number: {}", num)))
            }
        },
        Some(other) => Err(CpiError::ParseError(format!("Unknown transform type: {}", other))),
        None => Ok(Value::String(value_str.to_string())),
    }
}
$$--GLUE--$$
.\provider.rs
$$--GLUE--$$
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::path::PathBuf;
use std::fs::File;
use serde_json::Value;
use super::error::CpiError;

#[derive(Deserialize, Debug, Clone)]
pub struct Provider {
    pub name: String,
    #[serde(rename = "type")]
    pub provider_type: String,
    pub actions: HashMap<String, ActionDef>,
    pub default_settings: Option<HashMap<String, Value>>,
}

#[derive(Deserialize, Debug, Clone)]
pub struct ActionDef {
    pub command: String,
    pub params: Option<Vec<String>>,
    pub pre_exec: Option<Vec<ActionDef>>,
    pub post_exec: Option<Vec<ActionDef>>,
    pub parse_rules: ParseRules,
}

#[derive(Deserialize, Debug, Clone)]
#[serde(tag = "type")]
pub enum ParseRules {
    #[serde(rename = "object")]
    Object {
        patterns: HashMap<String, Pattern>,
    },
    #[serde(rename = "array")]
    Array {
        separator: String,
        patterns: HashMap<String, Pattern>,
    },
    #[serde(rename = "properties")]
    Properties {
        patterns: HashMap<String, Pattern>,
        array_patterns: Option<HashMap<String, ArrayPattern>>,
        array_key: Option<String>,
        related_patterns: Option<HashMap<String, Pattern>>,
    },
}

#[derive(Deserialize, Debug, Clone)]
pub struct Pattern {
    pub regex: String,
    pub group: Option<usize>,
    pub transform: Option<String>,
    pub optional: Option<bool>,
    pub match_value: Option<String>,
}

#[derive(Deserialize, Debug, Clone)]
pub struct ArrayPattern {
    pub prefix: String,
    pub index: String,
    pub object: HashMap<String, Pattern>,
}

impl Provider {
    pub fn get_action(&self, action_name: &str) -> Result<&ActionDef, CpiError> {
        self.actions.get(action_name)
            .ok_or_else(|| CpiError::ActionNotFound(action_name.to_string()))
    }
}

pub fn load_provider(path: PathBuf) -> Result<Provider, CpiError> {
    let file = File::open(&path)
        .map_err(|e| CpiError::IoError(e))?;
    
    let provider: Provider = serde_json::from_reader(file)
        .map_err(|e| CpiError::SerdeError(e))?;
    
    Ok(provider)
}
$$--GLUE--$$
.\validator.rs
$$--GLUE--$$
use serde_json::Value;
use super::error::CpiError;

// Validate CPI JSON format
pub fn validate_cpi_format(json: &Value) -> Result<(), CpiError> {
    // Check if it's an object
    if !json.is_object() {
        return Err(CpiError::InvalidCpiFormat("Root element must be an object".to_string()));
    }
    
    // Required fields
    let required_fields = ["name", "type", "actions"];
    for field in required_fields.iter() {
        if !json.get(*field).is_some() {
            return Err(CpiError::InvalidCpiFormat(format!("Missing required field: {}", field)));
        }
    }
    
    // Validate name
    let name = json.get("name").unwrap();
    if !name.is_string() {
        return Err(CpiError::InvalidCpiFormat("'name' must be a string".to_string()));
    }
    
    // Validate type
    let provider_type = json.get("type").unwrap();
    if !provider_type.is_string() {
        return Err(CpiError::InvalidCpiFormat("'type' must be a string".to_string()));
    }
    
    // Validate actions
    let actions = json.get("actions").unwrap();
    if !actions.is_object() {
        return Err(CpiError::InvalidCpiFormat("'actions' must be an object".to_string()));
    }
    
    // Validate each action
    let actions_obj = actions.as_object().unwrap();
    for (action_name, action_def) in actions_obj {
        validate_action(action_name, action_def)?;
    }
    
    // Validate default_settings if present
    if let Some(default_settings) = json.get("default_settings") {
        if !default_settings.is_object() {
            return Err(CpiError::InvalidCpiFormat("'default_settings' must be an object".to_string()));
        }
    }
    
    Ok(())
}

// Validate action definition
fn validate_action(action_name: &str, action_def: &Value) -> Result<(), CpiError> {
    if !action_def.is_object() {
        return Err(CpiError::InvalidCpiFormat(
            format!("Action '{}' must be an object", action_name)
        ));
    }
    
    // Required field: command
    let command = action_def.get("command");
    if command.is_none() || !command.unwrap().is_string() {
        return Err(CpiError::InvalidCpiFormat(
            format!("Action '{}' must have a string 'command' field", action_name)
        ));
    }
    
    // Required field: parse_rules
    let parse_rules = action_def.get("parse_rules");
    if parse_rules.is_none() || !parse_rules.unwrap().is_object() {
        return Err(CpiError::InvalidCpiFormat(
            format!("Action '{}' must have an object 'parse_rules' field", action_name)
        ));
    }
    
    // Validate parse_rules
    validate_parse_rules(action_name, parse_rules.unwrap())?;
    
    // Optional field: params (array of strings)
    if let Some(params) = action_def.get("params") {
        if !params.is_array() {
            return Err(CpiError::InvalidCpiFormat(
                format!("Action '{}' has 'params' that is not an array", action_name)
            ));
        }
        
        for (i, param) in params.as_array().unwrap().iter().enumerate() {
            if !param.is_string() {
                return Err(CpiError::InvalidCpiFormat(
                    format!("Action '{}' param at index {} is not a string", action_name, i)
                ));
            }
        }
    }
    
    // Optional field: pre_exec (array of actions)
    if let Some(pre_exec) = action_def.get("pre_exec") {
        validate_sub_actions(action_name, "pre_exec", pre_exec)?;
    }
    
    // Optional field: post_exec (array of actions)
    if let Some(post_exec) = action_def.get("post_exec") {
        validate_sub_actions(action_name, "post_exec", post_exec)?;
    }
    
    Ok(())
}

// Validate sub-actions (pre_exec or post_exec)
fn validate_sub_actions(action_name: &str, field: &str, sub_actions: &Value) -> Result<(), CpiError> {
    if !sub_actions.is_array() {
        return Err(CpiError::InvalidCpiFormat(
            format!("Action '{}' has '{}' that is not an array", action_name, field)
        ));
    }
    
    for (i, sub_action) in sub_actions.as_array().unwrap().iter().enumerate() {
        if !sub_action.is_object() {
            return Err(CpiError::InvalidCpiFormat(
                format!("Action '{}' '{}' at index {} is not an object", action_name, field, i)
            ));
        }
        
        // Each sub-action should have the same structure as a normal action
        validate_action(&format!("{}[{}]", field, i), sub_action)?;
    }
    
    Ok(())
}

// Validate parse_rules structure
fn validate_parse_rules(action_name: &str, parse_rules: &Value) -> Result<(), CpiError> {
    // Must have a "type" field
    let rule_type = parse_rules.get("type");
    if rule_type.is_none() || !rule_type.unwrap().is_string() {
        return Err(CpiError::InvalidCpiFormat(
            format!("Action '{}' parse_rules must have a string 'type' field", action_name)
        ));
    }
    
    let rule_type_str = rule_type.unwrap().as_str().unwrap();
    
    match rule_type_str {
        "object" => {
            // For object type, must have "patterns" field
            let patterns = parse_rules.get("patterns");
            if patterns.is_none() || !patterns.unwrap().is_object() {
                return Err(CpiError::InvalidCpiFormat(
                    format!("Action '{}' object parse_rules must have an object 'patterns' field", action_name)
                ));
            }
            
            // Validate patterns
            validate_patterns(action_name, patterns.unwrap())?;
        },
        "array" => {
            // For array type, must have "separator" and "patterns" fields
            let separator = parse_rules.get("separator");
            if separator.is_none() || !separator.unwrap().is_string() {
                return Err(CpiError::InvalidCpiFormat(
                    format!("Action '{}' array parse_rules must have a string 'separator' field", action_name)
                ));
            }
            
            let patterns = parse_rules.get("patterns");
            if patterns.is_none() || !patterns.unwrap().is_object() {
                return Err(CpiError::InvalidCpiFormat(
                    format!("Action '{}' array parse_rules must have an object 'patterns' field", action_name)
                ));
            }
            
            // Validate patterns
            validate_patterns(action_name, patterns.unwrap())?;
        },
        "properties" => {
            // For properties type, must have "patterns" field
            let patterns = parse_rules.get("patterns");
            if patterns.is_none() || !patterns.unwrap().is_object() {
                return Err(CpiError::InvalidCpiFormat(
                    format!("Action '{}' properties parse_rules must have an object 'patterns' field", action_name)
                ));
            }
            
            // Validate patterns
            validate_patterns(action_name, patterns.unwrap())?;
            
            // Optional field: array_patterns
            if let Some(array_patterns) = parse_rules.get("array_patterns") {
                if !array_patterns.is_object() {
                    return Err(CpiError::InvalidCpiFormat(
                        format!("Action '{}' properties parse_rules has 'array_patterns' that is not an object", action_name)
                    ));
                }
                
                // Validate each array pattern
                for (pattern_name, pattern_def) in array_patterns.as_object().unwrap() {
                    validate_array_pattern(action_name, pattern_name, pattern_def)?;
                }
            }
            
            // Optional field: related_patterns
            if let Some(related_patterns) = parse_rules.get("related_patterns") {
                if !related_patterns.is_object() {
                    return Err(CpiError::InvalidCpiFormat(
                        format!("Action '{}' properties parse_rules has 'related_patterns' that is not an object", action_name)
                    ));
                }
                
                // Validate patterns
                validate_patterns(action_name, related_patterns)?;
            }
        },
        _ => {
            return Err(CpiError::InvalidCpiFormat(
                format!("Unknown parse_rules type: {}", rule_type_str)
            ));
        }
    }
    
    Ok(())
}

// Validate patterns object
fn validate_patterns(action_name: &str, patterns: &Value) -> Result<(), CpiError> {
    for (pattern_name, pattern) in patterns.as_object().unwrap() {
        if !pattern.is_object() {
            return Err(CpiError::InvalidCpiFormat(
                format!("Action '{}' pattern '{}' is not an object", action_name, pattern_name)
            ));
        }
        
        // Each pattern must have a regex field
        let regex = pattern.get("regex");
        if regex.is_none() || !regex.unwrap().is_string() {
            return Err(CpiError::InvalidCpiFormat(
                format!("Action '{}' pattern '{}' must have a string 'regex' field", action_name, pattern_name)
            ));
        }
        
        // Optional: group (number)
        if let Some(group) = pattern.get("group") {
            if !group.is_number() {
                return Err(CpiError::InvalidCpiFormat(
                    format!("Action '{}' pattern '{}' has 'group' that is not a number", action_name, pattern_name)
                ));
            }
        }
        
        // Optional: transform (string)
        if let Some(transform) = pattern.get("transform") {
            if !transform.is_string() {
                return Err(CpiError::InvalidCpiFormat(
                    format!("Action '{}' pattern '{}' has 'transform' that is not a string", action_name, pattern_name)
                ));
            }
            
            // Check if transform is one of the allowed values
            let transform_str = transform.as_str().unwrap();
            match transform_str {
                "boolean" | "number" => (),
                _ => return Err(CpiError::InvalidCpiFormat(
                    format!("Action '{}' pattern '{}' has unknown transform type: {}", 
                        action_name, pattern_name, transform_str)
                )),
            }
        }
        
        // Optional: optional (boolean)
        if let Some(optional) = pattern.get("optional") {
            if !optional.is_boolean() {
                return Err(CpiError::InvalidCpiFormat(
                    format!("Action '{}' pattern '{}' has 'optional' that is not a boolean", action_name, pattern_name)
                ));
            }
        }
        
        // Optional: match_value (string)
        if let Some(match_value) = pattern.get("match_value") {
            if !match_value.is_string() {
                return Err(CpiError::InvalidCpiFormat(
                    format!("Action '{}' pattern '{}' has 'match_value' that is not a string", action_name, pattern_name)
                ));
            }
        }
    }
    
    Ok(())
}

// Validate array_pattern structure
fn validate_array_pattern(action_name: &str, pattern_name: &str, pattern: &Value) -> Result<(), CpiError> {
    if !pattern.is_object() {
        return Err(CpiError::InvalidCpiFormat(
            format!("Action '{}' array_pattern '{}' is not an object", action_name, pattern_name)
        ));
    }
    
    // Required fields
    let required_fields = ["prefix", "index", "object"];
    for field in required_fields.iter() {
        if pattern.get(*field).is_none() {
            return Err(CpiError::InvalidCpiFormat(
                format!("Action '{}' array_pattern '{}' is missing required field: {}", 
                    action_name, pattern_name, field)
            ));
        }
    }
    
    // prefix must be a string
    let prefix = pattern.get("prefix").unwrap();
    if !prefix.is_string() {
        return Err(CpiError::InvalidCpiFormat(
            format!("Action '{}' array_pattern '{}' has 'prefix' that is not a string", 
                action_name, pattern_name)
        ));
    }
    
    // index must be a string
    let index = pattern.get("index").unwrap();
    if !index.is_string() {
        return Err(CpiError::InvalidCpiFormat(
            format!("Action '{}' array_pattern '{}' has 'index' that is not a string", 
                action_name, pattern_name)
        ));
    }
    
    // object must be an object of patterns
    let object = pattern.get("object").unwrap();
    if !object.is_object() {
        return Err(CpiError::InvalidCpiFormat(
            format!("Action '{}' array_pattern '{}' has 'object' that is not an object", 
                action_name, pattern_name)
        ));
    }
    
    // Validate the object patterns
    validate_patterns(action_name, object)?;
    
    Ok(())
}