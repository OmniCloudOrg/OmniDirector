{
  "name": "virtualbox_linux",
  "type": "command",
  "default_settings": {
    "os_type": "Ubuntu_64",
    "memory_mb": 2048,
    "cpu_count": 2,
    "controller_name": "SATA Controller",
    "network_type": "nat",
    "username": "vboxuser",
    "password": "password"
  },
  "actions": {
    "test_install": {
      "target": {
        "Command": {
          "command": "VBoxManage --version",
          "in_vm": false
        }
      },
      "params": [],
      "parse_rules": {
        "type": "object",
        "patterns": {
          "version": {
            "regex": "^([\\d\\.]+)\\s*$",
            "group": 1
          }
        }
      }
    },
    "list_workers": {
      "target": {
        "Command": {
          "command": "VBoxManage list vms",
          "in_vm": false
        }
      },
      "params": [],
      "parse_rules": {
        "type": "array",
        "separator": "\\r?\\n",
        "patterns": {
          "name": {
            "regex": "\"([^\"]+)\"",
            "group": 1
          },
          "uuid": {
            "regex": "\\{([0-9a-f-]+)\\}",
            "group": 1
          }
        }
      }
    },
    "create_worker": {
      "target": {
        "Command": {
          "command": "VBoxManage createvm --name \"{worker_name}\" --ostype {os_type} --register",
          "in_vm": false
        }
      },
      "params": [
        "worker_name",
        "os_type"
      ],
      "post_exec": [
        {
          "target": {
            "Command": {
              "command": "VBoxManage modifyvm \"{worker_name}\" --memory {memory_mb} --cpus {cpu_count}",
              "in_vm": false
            }
          },
          "parse_rules": {
            "type": "object",
            "patterns": {
              "success": {
                "regex": ".*",
                "transform": "boolean"
              }
            }
          }
        },
        {
          "target": {
            "Command": {
              "command": "VBoxManage modifyvm \"{worker_name}\" --nic1 nat",
              "in_vm": false
            }
          },
          "parse_rules": {
            "type": "object",
            "patterns": {
              "success": {
                "regex": ".*",
                "transform": "boolean"
              }
            }
          }
        }
      ],
      "parse_rules": {
        "type": "object",
        "patterns": {
          "uuid": {
            "regex": "UUID: ([0-9a-f-]+)",
            "group": 1
          }
        }
      }
    },
    "delete_worker": {
      "target": {
        "Command": {
          "command": "VBoxManage unregistervm \"{worker_name}\" --delete",
          "in_vm": false
        }
      },
      "params": [
        "worker_name"
      ],
      "parse_rules": {
        "type": "object",
        "patterns": {
          "success": {
            "regex": ".*",
            "transform": "boolean"
          }
        }
      }
    },
    "get_worker": {
      "target": {
        "Command": {
          "command": "VBoxManage showvminfo \"{worker_name}\" --machinereadable",
          "in_vm": false
        }
      },
      "params": [
        "worker_name"
      ],
      "parse_rules": {
        "type": "properties",
        "patterns": {
          "name": {
            "regex": "^name=\"(.*)\"$",
            "group": 1
          },
          "id": {
            "regex": "^UUID=\"(.*)\"$",
            "group": 1
          },
          "state": {
            "regex": "^VMState=\"(.*)\"$",
            "group": 1
          },
          "memory_mb": {
            "regex": "^memory=(\\d+)$",
            "group": 1,
            "transform": "number"
          },
          "cpu_count": {
            "regex": "^cpus=(\\d+)$",
            "group": 1,
            "transform": "number"
          },
          "os_type": {
            "regex": "^ostype=\"(.*)\"$",
            "group": 1
          },
          "firmware": {
            "regex": "^firmware=\"(.*)\"$",
            "group": 1
          },
          "graphics_controller": {
            "regex": "^graphicscontroller=\"(.*)\"$",
            "group": 1
          }
        }
      }
    },
    "get_adapters": {
      "target": {
        "Command": {
          "command": "VBoxManage showvminfo \"{worker_name}\" --machinereadable",
          "in_vm": false
        }
      },
      "params": [
        "worker_name"
      ],
      "parse_rules": {
        "type": "properties",
        "patterns": {
          "worker_name": {
            "regex": "^name=\"(.*)\"$",
            "group": 1
          }
        },
        "array_patterns": {
          "network_adapters": {
            "prefix": "nic",
            "index": "\\d+",
            "object": {
              "type": {
                "regex": "^nic(\\d+)=\"(.*)\"$",
                "group": 2
              },
              "mac_address": {
                "regex": "^macaddress(\\d+)=\"(.*)\"$",
                "group": 2,
                "optional": true
              },
              "connection_status": {
                "regex": "^cableconnected(\\d+)=\"(.*)\"$",
                "group": 2,
                "optional": true
              },
              "adapter_type": {
                "regex": "^nictype(\\d+)=\"(.*)\"$",
                "group": 2,
                "optional": true
              }
            }
          }
        }
      }
    },
    "has_worker": {
      "target": {
        "Command": {
          "command": "VBoxManage showvminfo {worker_name} --machinereadable",
          "in_vm": false
        }
      },
      "params": [
        "worker_name"
      ],
      "parse_rules": {
        "type": "object",
        "patterns": {
          "exists": {
            "regex": ".*",
            "transform": "boolean"
          }
        }
      }
    },
    "start_worker": {
      "target": {
        "Command": {
          "command": "VBoxManage startvm \"{worker_name}\" --type headless",
          "in_vm": false
        }
      },
      "params": [
        "worker_name"
      ],
      "parse_rules": {
        "type": "object",
        "patterns": {
          "started": {
            "regex": "VM \"(.+)\" has been successfully started",
            "group": 1
          }
        }
      }
    },
    "get_volumes": {
      "target": {
        "Command": {
          "command": "VBoxManage list hdds",
          "in_vm": false
        }
      },
      "params": [],
      "parse_rules": {
        "type": "array",
        "separator": "\n\n",
        "patterns": {
          "id": {
            "regex": "UUID:\\s+(.+)",
            "group": 1
          },
          "path": {
            "regex": "Location:\\s+(.+)",
            "group": 1
          },
          "size_mb": {
            "regex": "Capacity:\\s+(\\d+) MBytes",
            "group": 1,
            "transform": "number"
          },
          "format": {
            "regex": "Format:\\s+(.+)",
            "group": 1
          },
          "type": {
            "regex": "Type:\\s+(.+)",
            "group": 1
          },
          "parent": {
            "regex": "Parent UUID:\\s+(.+)",
            "group": 1,
            "optional": true
          },
          "state": {
            "regex": "State:\\s+(.+)",
            "group": 1
          }
        }
      }
    },
    "has_volume": {
      "target": {
        "Command": {
          "command": "VBoxManage showmediuminfo disk {disk_path}",
          "in_vm": false
        }
      },
      "params": [
        "disk_path"
      ],
      "parse_rules": {
        "type": "object",
        "patterns": {
          "exists": {
            "regex": ".*",
            "transform": "boolean"
          }
        }
      }
    },
    "get_snapshots": {
      "target": {
        "Command": {
          "command": "VBoxManage snapshot \"{worker_name}\" list --machinereadable",
          "in_vm": false
        }
      },
      "params": [
        "worker_name"
      ],
      "parse_rules": {
        "type": "properties",
        "patterns": {
          "name": {
            "regex": "^SnapshotName-([\\d]+)=\"(.*)\"$",
            "group": 2
          },
          "uuid": {
            "regex": "^SnapshotUUID-([\\d]+)=\"(.*)\"$",
            "group": 2
          },
          "current": {
            "regex": "^CurrentSnapshotUUID=\"(.*)\"$",
            "group": 1
          }
        }
      }
    },
    "create_snapshot": {
      "target": {
        "Command": {
          "command": "VBoxManage snapshot \"{worker_name}\" take {snapshot_name}",
          "in_vm": false
        }
      },
      "params": [
        "worker_name",
        "snapshot_name"
      ],
      "parse_rules": {
        "type": "object",
        "patterns": {
          "uuid": {
            "regex": "taken as ([0-9a-f-]+)",
            "group": 1
          }
        }
      }
    },
    "has_snapshot": {
      "target": {
        "Command": {
          "command": "VBoxManage snapshot \"{worker_name}\" list --machinereadable",
          "in_vm": false
        }
      },
      "params": [
        "worker_name",
        "snapshot_name"
      ],
      "parse_rules": {
        "type": "object",
        "patterns": {
          "exists": {
            "regex": "SnapshotName-[\\d]+=\".*\"",
            "transform": "boolean"
          }
        }
      }
    },
    "attach_volume": {
      "target": {
        "Command": {
          "command": "VBoxManage storageattach \"{worker_name}\" --storagectl {controller_name} --port {port} --device 0 --type hdd --medium {disk_path}",
          "in_vm": false
        }
      },
      "params": [
        "worker_name",
        "controller_name",
        "port",
        "disk_path"
      ],
      "pre_exec": [
        {
          "target": {
            "Command": {
              "command": "VBoxManage storagectl \"{worker_name}\" --name {controller_name} --add sata --controller IntelAhci --portcount 30",
              "in_vm": false
            }
          },
          "parse_rules": {
            "type": "object",
            "patterns": {
              "success": {
                "regex": ".*",
                "transform": "boolean"
              }
            }
          }
        }
      ],
      "parse_rules": {
        "type": "object",
        "patterns": {
          "success": {
            "regex": ".*",
            "transform": "boolean"
          }
        }
      }
    },
    "detach_volume": {
      "target": {
        "Command": {
          "command": "VBoxManage storageattach \"{worker_name}\" --storagectl {controller_name} --port {port} --device 0 --type hdd --medium none",
          "in_vm": false
        }
      },
      "params": [
        "worker_name",
        "controller_name",
        "port"
      ],
      "parse_rules": {
        "type": "object",
        "patterns": {
          "success": {
            "regex": ".*",
            "transform": "boolean"
          }
        }
      }
    },
    "create_volume": {
      "target": {
        "Command": {
          "command": "VBoxManage createmedium disk --filename {disk_path} --size {size_mb} --format VDI",
          "in_vm": false
        }
      },
      "params": [
        "disk_path",
        "size_mb"
      ],
      "parse_rules": {
        "type": "object",
        "patterns": {
          "uuid": {
            "regex": "UUID: ([0-9a-f-]+)",
            "group": 1
          },
          "path": {
            "regex": "Location: (.+)",
            "group": 1
          }
        }
      }
    },
    "delete_volume": {
      "target": {
        "Command": {
          "command": "VBoxManage closemedium disk {disk_path} --delete",
          "in_vm": false
        }
      },
      "params": [
        "disk_path"
      ],
      "parse_rules": {
        "type": "object",
        "patterns": {
          "success": {
            "regex": ".*",
            "transform": "boolean"
          }
        }
      }
    },
    "reboot_worker": {
      "target": {
        "Command": {
          "command": "VBoxManage controlvm \"{worker_name}\" reset",
          "in_vm": false
        }
      },
      "params": [
        "worker_name"
      ],
      "parse_rules": {
        "type": "object",
        "patterns": {
          "success": {
            "regex": ".*",
            "transform": "boolean"
          }
        }
      }
    },
    "snapshot_volume": {
      "target": {
        "Command": {
          "command": "VBoxManage clonemedium disk {source_volume_path} {target_volume_path}",
          "in_vm": false
        }
      },
      "params": [
        "source_volume_path",
        "target_volume_path"
      ],
      "parse_rules": {
        "type": "object",
        "patterns": {
          "uuid": {
            "regex": "UUID: ([0-9a-f-]+)",
            "group": 1
          }
        }
      }
    },
    "configure_networks": {
      "target": {
        "Command": {
          "command": "VBoxManage modifyvm \"{worker_name}\" --nic{network_index} {network_type}",
          "in_vm": false
        }
      },
      "params": [
        "worker_name",
        "network_index",
        "network_type"
      ],
      "parse_rules": {
        "type": "object",
        "patterns": {
          "success": {
            "regex": ".*",
            "transform": "boolean"
          }
        }
      }
    },
    "set_worker_metadata": {
      "target": {
        "Command": {
          "command": "VBoxManage setextradata \"{worker_name}\" {key} {value}",
          "in_vm": false
        }
      },
      "params": [
        "worker_name",
        "key",
        "value"
      ],
      "parse_rules": {
        "type": "object",
        "patterns": {
          "success": {
            "regex": ".*",
            "transform": "boolean"
          }
        }
      }
    },
    "delete_snapshot": {
      "target": {
        "Command": {
          "command": "VBoxManage snapshot \"{worker_name}\" delete {snapshot_name}",
          "in_vm": false
        }
      },
      "params": [
        "worker_name",
        "snapshot_name"
      ],
      "parse_rules": {
        "type": "object",
        "patterns": {
          "success": {
            "regex": ".*",
            "transform": "boolean"
          }
        }
      }
    },
    "execute_target": {
      "target": {
        "Command": {
          "command": "ls -lah",
          "in_vm": true
        }
      },
      "params": [
        "worker_name",
        "username",
        "password",
        "target_path",
        "target_args"
      ],
      "parse_rules": {
        "type": "object",
        "patterns": {
          "output": {
            "regex": "(.*)",
            "group": 1,
            "optional": true
          }
        }
      }
    }
  }
}