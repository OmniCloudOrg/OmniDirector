{
    "name": "std_kvm",
    "type": "command",
    "default_settings": {
      "memory_mb": "2048",
      "vcpus": "2",
      "disk_size_gb": "20",
      "disk_format": "qcow2",
      "image_path": "/var/lib/libvirt/images",
      "os_variant": "ubuntu20.04",
      "graphics": "vnc",
      "network": "default"
    },
    "actions": {
      "test_install": {
        "command": "virsh --version",
        "params": [],
        "parse_rules": {
          "type": "object",
          "patterns": {
            "version": {
              "regex": "([\\d\\.]+)",
              "group": 1
            }
          }
        }
      },
      "list_vms": {
        "command": "virsh list --all",
        "params": [],
        "parse_rules": {
          "type": "array",
          "separator": "\\n",
          "patterns": {
            "id": {
              "regex": "^\\s*(\\d+|-)\\s+",
              "group": 1
            },
            "name": {
              "regex": "^\\s*(?:\\d+|-)\\s+([^\\s]+)",
              "group": 1
            },
            "state": {
              "regex": "^\\s*(?:\\d+|-)\\s+[^\\s]+\\s+([^\\s]+)",
              "group": 1
            }
          }
        }
      },
      "create_vm": {
        "command": "virt-install --name {vm_name} --memory {memory_mb} --vcpus {vcpus} --disk path={image_path}/{vm_name}.qcow2,size={disk_size_gb} --os-variant {os_variant} --graphics {graphics} --network {network} --import --disk {os_image},device=cdrom --noautoconsole",
        "params": [
          "vm_name",
          "memory_mb",
          "vcpus",
          "image_path",
          "disk_size_gb",
          "os_variant",
          "graphics",
          "network",
          "os_image"
        ],
        "parse_rules": {
          "type": "object",
          "patterns": {
            "domain": {
              "regex": "Domain creation completed\\.",
              "transform": "boolean"
            }
          }
        }
      },
      "delete_vm": {
        "command": "virsh undefine {vm_name} --remove-all-storage",
        "params": [
          "vm_name"
        ],
        "parse_rules": {
          "type": "object",
          "patterns": {
            "success": {
              "regex": "Domain [^\\s]+ has been undefined",
              "transform": "boolean"
            }
          }
        }
      },
      "start_vm": {
        "command": "virsh start {vm_name}",
        "params": [
          "vm_name"
        ],
        "parse_rules": {
          "type": "object",
          "patterns": {
            "success": {
              "regex": "Domain [^\\s]+ started",
              "transform": "boolean"
            }
          }
        }
      },
      "stop_vm": {
        "command": "virsh shutdown {vm_name}",
        "params": [
          "vm_name"
        ],
        "parse_rules": {
          "type": "object",
          "patterns": {
            "success": {
              "regex": "Domain [^\\s]+ is being shutdown",
              "transform": "boolean"
            }
          }
        }
      },
      "force_stop_vm": {
        "command": "virsh destroy {vm_name}",
        "params": [
          "vm_name"
        ],
        "parse_rules": {
          "type": "object",
          "patterns": {
            "success": {
              "regex": "Domain [^\\s]+ destroyed",
              "transform": "boolean"
            }
          }
        }
      },
      "get_vm": {
        "command": "virsh dominfo {vm_name}",
        "params": [
          "vm_name"
        ],
        "parse_rules": {
          "type": "properties",
          "patterns": {
            "id": {
              "regex": "Id:\\s+(\\d+)",
              "group": 1,
              "transform": "number"
            },
            "name": {
              "regex": "Name:\\s+([^\\s]+)",
              "group": 1
            },
            "uuid": {
              "regex": "UUID:\\s+([a-f0-9-]+)",
              "group": 1
            },
            "state": {
              "regex": "State:\\s+([^\\s]+)",
              "group": 1
            },
            "memory": {
              "regex": "Max memory:\\s+(\\d+)",
              "group": 1,
              "transform": "number"
            },
            "vcpus": {
              "regex": "CPU\\(s\\):\\s+(\\d+)",
              "group": 1,
              "transform": "number"
            },
            "cpu_time": {
              "regex": "CPU time:\\s+([\\d\\.]+)",
              "group": 1,
              "transform": "number"
            }
          }
        }
      },
      "has_vm": {
        "command": "virsh dominfo {vm_name}",
        "params": [
          "vm_name"
        ],
        "parse_rules": {
          "type": "object",
          "patterns": {
            "exists": {
              "regex": "Name:\\s+",
              "transform": "boolean"
            }
          }
        }
      },
      "create_snapshot": {
        "command": "virsh snapshot-create-as {vm_name} {snapshot_name} {snapshot_description}",
        "params": [
          "vm_name",
          "snapshot_name",
          "snapshot_description"
        ],
        "parse_rules": {
          "type": "object",
          "patterns": {
            "success": {
              "regex": "Domain snapshot [^\\s]+ created",
              "transform": "boolean"
            }
          }
        }
      },
      "list_snapshots": {
        "command": "virsh snapshot-list {vm_name}",
        "params": [
          "vm_name"
        ],
        "parse_rules": {
          "type": "array",
          "separator": "\\n",
          "patterns": {
            "name": {
              "regex": "^\\s+([^\\s]+)",
              "group": 1
            },
            "creation_time": {
              "regex": "^\\s+[^\\s]+\\s+([^\\s]+\\s[^\\s]+)",
              "group": 1
            },
            "state": {
              "regex": "^\\s+[^\\s]+\\s+[^\\s]+\\s[^\\s]+\\s+([^\\s]+)",
              "group": 1
            }
          }
        }
      },
      "revert_to_snapshot": {
        "command": "virsh snapshot-revert {vm_name} {snapshot_name}",
        "params": [
          "vm_name",
          "snapshot_name"
        ],
        "parse_rules": {
          "type": "object",
          "patterns": {
            "success": {
              "regex": "successfully",
              "transform": "boolean"
            }
          }
        }
      },
      "delete_snapshot": {
        "command": "virsh snapshot-delete {vm_name} {snapshot_name}",
        "params": [
          "vm_name",
          "snapshot_name"
        ],
        "parse_rules": {
          "type": "object",
          "patterns": {
            "success": {
              "regex": "Domain snapshot [^\\s]+ deleted",
              "transform": "boolean"
            }
          }
        }
      },
      "has_snapshot": {
        "command": "virsh snapshot-list {vm_name} | grep {snapshot_name}",
        "params": [
          "vm_name",
          "snapshot_name"
        ],
        "parse_rules": {
          "type": "object",
          "patterns": {
            "exists": {
              "regex": ".*",
              "transform": "boolean"
            }
          }
        }
      },
      "list_disks": {
        "command": "virsh domblklist {vm_name}",
        "params": [
          "vm_name"
        ],
        "parse_rules": {
          "type": "array",
          "separator": "\\n",
          "patterns": {
            "target": {
              "regex": "^\\s*([^\\s]+)",
              "group": 1
            },
            "source": {
              "regex": "^\\s*[^\\s]+\\s+([^\\s]+)",
              "group": 1
            }
          }
        }
      },
      "create_disk": {
        "command": "qemu-img create -f {disk_format} {image_path}/{disk_name}.{disk_format} {size_gb}G",
        "params": [
          "disk_format",
          "image_path",
          "disk_name",
          "size_gb"
        ],
        "parse_rules": {
          "type": "object",
          "patterns": {
            "success": {
              "regex": "Formatting",
              "transform": "boolean"
            }
          }
        }
      },
      "attach_disk": {
        "command": "virsh attach-disk {vm_name} {image_path}/{disk_name}.{disk_format} {target_dev} --persistent",
        "params": [
          "vm_name",
          "image_path",
          "disk_name",
          "disk_format",
          "target_dev"
        ],
        "parse_rules": {
          "type": "object",
          "patterns": {
            "success": {
              "regex": "successfully|already exists",
              "transform": "boolean"
            }
          }
        }
      },
      "detach_disk": {
        "command": "virsh detach-disk {vm_name} {target_dev} --persistent",
        "params": [
          "vm_name",
          "target_dev"
        ],
        "parse_rules": {
          "type": "object",
          "patterns": {
            "success": {
              "regex": "successfully",
              "transform": "boolean"
            }
          }
        }
      },
      "get_networks": {
        "command": "virsh net-list --all",
        "params": [],
        "parse_rules": {
          "type": "array",
          "separator": "\\n",
          "patterns": {
            "name": {
              "regex": "^\\s*([^\\s]+)",
              "group": 1
            },
            "state": {
              "regex": "^\\s*[^\\s]+\\s+([^\\s]+)",
              "group": 1
            },
            "autostart": {
              "regex": "^\\s*[^\\s]+\\s+[^\\s]+\\s+([^\\s]+)",
              "group": 1
            }
          }
        }
      },
      "execute_command": {
        "command": "virt-ssh-sh {vm_name} {command_string}",
        "params": [
          "vm_name",
          "command_string"
        ],
        "parse_rules": {
          "type": "object",
          "patterns": {
            "output": {
              "regex": "(.*)",
              "group": 1
            }
          }
        }
      }
    }
  }